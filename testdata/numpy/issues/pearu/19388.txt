Skip to content
numpy
/
numpy

Type / to search

Code
Issues
2k
Pull requests
230
Actions
Projects
9
Wiki
Security
Insights
ENH: Support character and character string arrays #19388
 Merged
melissawm merged 4 commits into numpy:main from pearu:enh-f2py-character-support on Jun 6, 2022
+1,804 âˆ’356 
 Conversation 76
 Commits 4
 Checks 0
 Files changed 27
Conversation
pearu
Contributor
pearu commented on Jul 1, 2021 â€¢ 
This PR provides the following features:

support for wrapping Fortran functions with

character (e.g. character x)
character array (e.g. character, dimension(n) :: x)
character string (e.g. character(len=10) x)
and character string array (e.g. character(len=10), dimension(n, m) :: x)
arguments, including passing Python unicode strings as Fortran character string arguments.
This support includes comprehensive tests and documentation.

the generated extension modules don't use the deprecated NumPy CAPI anymore

improved f2py generated exception messages

numerous bug and flake8 warning fixes

various CPP macros that one can use within C-expressions of signature files are prefixed with f2py_. For example, one should use f2py_len(x) instead of len(x)

a new construct character(f2py_len=...) is introduced to support returning assumed length character strings (e.g. character(len=*)) from wrapper functions

introduce a hook to support rewriting f2py internal data structures after reading all its input files. This is required, for instance, for BC of scipy support where character arguments are treated as character strings arguments in C expressions.

Fixes #18684, #635, #6308, #4519, #3425, #10027

@github-actions github-actions bot added the 01 - Enhancement label on Jul 1, 2021
@pearu pearu marked this pull request as draft 2 years ago
seberg
seberg reviewed on Jul 1, 2021
numpy/f2py/cfuncs.py
Outdated
@pearu pearu force-pushed the enh-f2py-character-support branch from 78ce316 to 0d27f21 
2 years ago
@pearu pearu added the component: numpy.f2py label on Jul 2, 2021
@pearu pearu self-assigned this on Jul 2, 2021
@pearu pearu added this to In progress in f2py core via automation on Jul 2, 2021
This was linked to issues on Jul 3, 2021
numpy.f2py produces wrong results for arrays of strings #4519
Closed
BUG: f2py character array variables now broken #6308
Closed
f2py fails for functions returning character(len=len(input_string)) #3425
Closed
@pearu pearu requested a review from melissawm 2 years ago
@pearu pearu marked this pull request as ready for review 2 years ago
@pearu pearu requested a review from seberg 2 years ago
@rgommers
Member
rgommers commented on Jul 5, 2021
Wow, that's an impressive list of things it fixes!

Perhaps this PR is not reviewable in detail, since it's both large and complex code. Perhaps good to review the tests and main approach in detail, and then if it passes and SciPy build is happy as well, then just merge it?

@pearu pearu requested a review from eric-wieser 2 years ago
melissawm
melissawm reviewed on Jul 20, 2021
Member
melissawm left a comment â€¢ 
I will not say I understand all the details :) I did take a look and one comment is that maybe we can make it clearer in the user guide when to use the new f2py_ macros (maybe just crosslinking the Advanced Usages and the Signature file guide.

I am also still investigating, but I think this breaks the SciPy tests. I'll check and see if I can pinpoint what is going on...

EDIT: Yes, this breaks the SciPy tests as character variables are not properly initialized. For example, running the SciPy tests, in subroutine _gesvx, in the flapack.pyf file, the variable fact should be initialized to "E", but it is instead being assigned the value E (note the lack of quotes!)

Here's a reproducer: saving the below as chartest.pyf

python module chartest
    interface
        subroutine chartest(fact, test)
            character optional, intent(in) :: fact = 'E'
            character, intent(out) :: test
        end subroutine chartest
    end interface
end python module chartest
generates chartestmodule.c with the following code:

/* Processing variable fact */
  if (fact_capi == Py_None) fact = E; else
    f2py_success = character_from_pyobj(&fact,fact_capi,"chartest.chartest() 1st keyword (fact) can't be converted to character");
  if (f2py_success) {
  /* Processing variable test */
It looks like character variables are being parsed as scalars and the initial value is going through _eval_scalar here

doc/source/f2py/advanced.rst
Outdated
numpy/f2py/src/fortranobject.c
Outdated
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.c
numpy/f2py/src/fortranobject.c
@HaoZeke HaoZeke mentioned this pull request on Aug 24, 2021
BUG: f2py fails on "hiperseis" program #14232
Closed
@pearu pearu mentioned this pull request on Aug 31, 2021
ENH: Symbolic solver for dimension specifications. #19805
 Merged
@pearu pearu force-pushed the enh-f2py-character-support branch from f42cc06 to 1601cce 
2 years ago
@pearu
Contributor
Author
pearu commented on Sep 1, 2021
There is another issue with scipy: consider https://github.com/scipy/scipy/blob/master/scipy/linalg/flapack_gen.pyf.src#L534

character optional,intent(in),check(*trans=='N'||*trans==<'T',\0,'C',\2>):: trans = 'N'
where the check expression assumes that trans has type char* while with this PR, it has char.

While this PR implements correct behavior for character, but in past, character was incorrectly treated as character*(1). So, we have a BC problem..

@rgommers
Member
rgommers commented on Sep 1, 2021
So, we have a BC problem..

Is there a way to work around it, like special casing SciPy within character array handling code in f2py?

@pearu
Contributor
Author
pearu commented on Sep 2, 2021
The commit b176abe resolves the character BC issue by rewriting C-expressions after reading .pyf or Fortran files.
Now scipy builds with the current PR.

@pearu pearu requested a review from melissawm 2 years ago
@pearu
Contributor
Author
pearu commented on Sep 2, 2021
Using this PR, the current scipy builds ok and all scipy tests pass. The PR fixes a number of long-lasting issues and blocks other f2py-related PRs. Unless there will be feedback that requires considerable effort, I'd like to land it as soon as possible, say, in 5 days.

@melissawm @seberg @rgommers @eric-wieser @mattip @HaoZeke please review.

mattip
mattip reviewed on Sep 3, 2021
numpy/f2py/rules.py
Outdated
HaoZeke
HaoZeke reviewed on Sep 5, 2021
doc/source/f2py/advanced.rst
Outdated
HaoZeke
HaoZeke reviewed on Sep 5, 2021
doc/source/f2py/advanced.rst
Outdated
HaoZeke
HaoZeke reviewed on Sep 5, 2021
doc/source/f2py/advanced.rst
Outdated
HaoZeke
HaoZeke reviewed on Sep 5, 2021
doc/source/f2py/advanced.rst
HaoZeke
HaoZeke reviewed on Sep 5, 2021
doc/source/f2py/asterisk1.f90
Outdated
11 hidden items
Load moreâ€¦
@pearu pearu marked this pull request as draft 2 years ago
@charris
Member
charris commented on Mar 14, 2022
Be good to finish this up.

@melissawm melissawm force-pushed the enh-f2py-character-support branch from bc41ca9 to d41bfa0 
last year
@melissawm
Member
melissawm commented on Apr 4, 2022 â€¢ 
@pearu I did the rebase ðŸŽ‰ - there is one test failing. test_string_callback_array, but I don't think it has to do with the rebase at all. Can you take a look?

HaoZeke
HaoZeke reviewed on Apr 5, 2022
numpy/f2py/src/fortranobject.c
  } else if (PySequence_Check(obj)) {
    PyObject* fast = PySequence_Fast(obj, "f2py:fortranobject.c:get_elsize");
    if (fast != NULL) {
      Py_ssize_t i, n = PySequence_Fast_GET_SIZE(fast);
Member
@HaoZeke HaoZeke on Apr 5, 2022 â€¢ 
Note for #21300, the possible migration to the Python-C Stable API.

Surprisingly, PySequence_Fast is part of the stable API but PySequence_Fast_GET_ITEM is not.

In this instance, switching to PySequence_GetItem would change the reference count since PySequence_GetItem returns a new reference, unlike Fast_GET_ITEM, which borrows the reference.

@bensivo	Reply...
@HaoZeke
Member
HaoZeke commented on May 20, 2022
This should get a release note (at-least for the hook, and actually for all the bullet points).

@HaoZeke HaoZeke mentioned this pull request on Jun 5, 2022
MAINT: F2PY string handling for F77 and F90 #21672
Open
@pearu
@HaoZeke
ENH: Support character string arrays 
d4e11c7
@HaoZeke HaoZeke force-pushed the enh-f2py-character-support branch from 16406aa to 5bdeb35 
last year
HaoZeke
HaoZeke reviewed on Jun 5, 2022
numpy/f2py/tests/test_callback.py
@HaoZeke HaoZeke force-pushed the enh-f2py-character-support branch from 0fc6adb to bcbd02b 
last year
HaoZeke added 2 commits last year
@HaoZeke
DOC: Add release notes
aeded38
@HaoZeke
TST: Fix build by changing call signature
f20d90c
@HaoZeke HaoZeke force-pushed the enh-f2py-character-support branch from bcbd02b to f20d90c 
last year
@HaoZeke HaoZeke marked this pull request as ready for review last year
@HaoZeke
Member
HaoZeke commented on Jun 5, 2022
@melissawm @pearu I'm in favor of landing this ASAP, SciPy builds and all the tests pass. @charris, do you think the release notes are alright or should they be reworded?

@HaoZeke HaoZeke force-pushed the enh-f2py-character-support branch 2 times, most recently from a3bd111 to 1d9952d 
last year
@HaoZeke
MAINT,DOC: Fix doc fragments and tests
5c0ecb5
@HaoZeke HaoZeke force-pushed the enh-f2py-character-support branch from 1d9952d to 5c0ecb5 
last year
@HaoZeke HaoZeke mentioned this pull request on Jun 5, 2022
Issue with f2py in Numpy 1.13 when character arrays appear in a callback function #10027
Closed
@melissawm
Member
melissawm commented on Jun 6, 2022
Let's do this - it looks good to me now and we won't see any potential side effects unless this is in. Thanks a lot @pearu and @HaoZeke !

@melissawm melissawm merged commit aeb2b21 into numpy:main on Jun 6, 2022
f2py core automation moved this from In progress to Done on Jun 6, 2022
@rgommers rgommers mentioned this pull request on Jun 17, 2022
MAINT: fix up use of NPY_NO_DEPRECATED_API usage in f2py #21786
 Merged
@bnavigator bnavigator mentioned this pull request on Dec 18, 2022
DOC: Clarify the interaction between -m MODULENAME and .pyf files #22819
Closed
@Alexboiboi Alexboiboi mentioned this pull request on Feb 24
PyGLM : OpenGL Mathematics (GLM) library for Python magpylib/magpylib#582
Open
@bobeldering bobeldering mentioned this pull request on Mar 7
BUG: incompatibility between 1.23 and 1.24 for f2py generated interface to string arrays #23356
Closed
@lesteve lesteve mentioned this pull request on Mar 14
New signature mismatch in scipy.sparse.linalg.svds pyodide/pyodide#3640
Closed
@HaoZeke HaoZeke mentioned this pull request on Aug 23
BUG: Fix common block handling in f2py #22657
 Merged
@bensivo


Add a comment
Comment
 
Add your comment here...
 
Remember, contributions to this repository should follow its contributing guidelines, security policy, and code of conduct.
 ProTip! Add comments to specific lines under Files changed.
Reviewers
@mattip
mattip
@HaoZeke
HaoZeke
@seberg
seberg
@eric-wieser
eric-wieser
@melissawm
melissawm
Assignees
@pearu
pearu
Labels
01 - Enhancement
component: numpy.f2py
Projects
f2py core
Done
Milestone
No milestone
Development
Successfully merging this pull request may close these issues.

 f2py - f90-style character array definition with character(len=n) fails
 
 BUG: f2py character array variables now broken
 
 numpy.f2py produces wrong results for arrays of strings
 
 f2py fails for functions returning character(len=len(input_string))
Notifications
Customize
Youâ€™re not receiving notifications from this thread.
7 participants
@pearu
@rgommers
@charris
@seberg
@melissawm
@HaoZeke
@mattip
Footer
Â© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
