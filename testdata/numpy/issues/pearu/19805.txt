Skip to content
numpy
/
numpy

Type / to search

Code
Issues
2k
Pull requests
230
Actions
Projects
9
Wiki
Security
Insights
ENH: Symbolic solver for dimension specifications. #19805
 Merged
charris merged 10 commits into numpy:main from pearu:gh-8062-dimdecs on Sep 26, 2021
+2,201 −267 
 Conversation 22
 Commits 10
 Checks 0
 Files changed 5
Conversation
pearu
Contributor
pearu commented on Aug 31, 2021 • 
Resolves #8062

Possibly conflicting with #19388 that replaces shape with f2py_shape. Whichever PR lands last, should update the usage of shape in crackfortran.py.

@pearu pearu added 01 - Enhancement component: numpy.f2py labels on Aug 31, 2021
@pearu pearu self-assigned this on Aug 31, 2021
@pearu pearu added this to In progress in f2py core via automation on Aug 31, 2021
@pearu
ENH: [f2py] Symbolic solver for dimension specifications.
a131dca
@pearu pearu force-pushed the gh-8062-dimdecs branch from 131a7ac to a131dca 
2 years ago
pearu added 6 commits 2 years ago
@pearu
Fix lint
d721e67
@pearu
Add new module numpy.f2py.symbolic
96e63aa
@pearu
Add stacklevel to warn call.
f3fd627
@pearu
Handle more Expr warnings.
0458585
@pearu
Fix a mistake
7b229a2
@pearu
Workaround numpy.tests.test_warnings bug of treating local warn funct… 
26752c3
@pearu pearu requested review from HaoZeke and melissawm 2 years ago
@pearu pearu marked this pull request as ready for review 2 years ago
@mattip
Member
mattip commented on Sep 1, 2021
LGTM give 6 new alerts for this PR. Are they accurate?

This pull request introduces 6 alerts when merging 26752c3 into 0656fc4 - view on LGTM.com
new alerts:

3 for Variable defined multiple times
1 for Comparison using is when operands support __eq__
1 for Unused local variable
1 for Incomplete ordering

@pearu
Fix bugs and warnings from LGTM report
d880dce
@pearu
Contributor
Author
pearu commented on Sep 1, 2021
LGTM give 6 new alerts for this PR. Are they accurate?

The LGTM alerts were partially accurate but were certainly useful to pinpoint one real bug. Fixed the bug and warnings in the latest commit.

@mattip
Member
mattip commented on Sep 1, 2021
+1 for LGTM

HaoZeke
HaoZeke reviewed on Sep 1, 2021
numpy/f2py/crackfortran.py
Outdated
HaoZeke
HaoZeke reviewed on Sep 1, 2021
numpy/f2py/symbolic.py
Outdated
HaoZeke
HaoZeke reviewed on Sep 1, 2021
numpy/f2py/symbolic.py
HaoZeke
HaoZeke approved these changes on Sep 1, 2021
Member
HaoZeke left a comment
This looks fantastic! I will recheck the issues to see if this fixes more than the one referenced here; but this is a huge step forward.

pearu added 2 commits 2 years ago
@pearu
Add ternary, ref, and deref expressions support.
345c9d9
@pearu
Fix a bug in dependencies. Implement support for relational operations.
88f988a
@pearu
Contributor
Author
pearu commented on Sep 3, 2021
scipy builds and all its tests pass with this PR.

@pearu pearu mentioned this pull request on Sep 6, 2021
ENH: Support character and character string arrays #19388
 Merged
@charris
Member
charris commented on Sep 17, 2021
@pearu Could you add a release note for this in doc/release/upcoming_changes? This is probably a new_feature or improvement.

melissawm
melissawm approved these changes on Sep 21, 2021
Member
melissawm left a comment
Very tiny typos otherwise this looks great, thanks @pearu !

numpy/f2py/tests/test_crackfortran.py


class TestDimSpec(util.F2PyTest):
    """This test site tests various expressions that are used as dimension
Member
@melissawm melissawm on Sep 21, 2021
Suggested change
    """This test site tests various expressions that are used as dimension
    """This test suite tests various expressions that are used as dimension
@bensivo	Reply...
numpy/f2py/tests/test_crackfortran.py
    `lower` and `upper` are arbitrary expressions of input parameters.
    The evaluation is performed in C, so f2py has to translate Fortran
    expressions to valid C expressions (an alternative approach is
    that a developer specifies the corresponing C expressions in a
Member
@melissawm melissawm on Sep 21, 2021
Suggested change
    that a developer specifies the corresponing C expressions in a
    that a developer specifies the corresponding C expressions in a
@bensivo	Reply...
@charris charris merged commit 4681424 into numpy:main on Sep 26, 2021
f2py core automation moved this from In progress to Done on Sep 26, 2021
charris added a commit to charris/numpy that referenced this pull request on Sep 26, 2021
@charris
MAINT: Minor cleanups after merging numpygh-19805 …
b8e46c6
@charris charris mentioned this pull request on Sep 26, 2021
MAINT: Minor cleanups after merging gh-19805 #19961
 Merged
@charris
Member
charris commented on Sep 26, 2021
Thanks @pearu. I've done the spelling fixes and added a release note in #19961, feel free to edit the release note. Does #19388 need fixes?

charris added a commit that referenced this pull request on Sep 27, 2021
@charris
Merge pull request #19961 from charris/minor-fixups …
ef56449
howjmay pushed a commit to howjmay/numpy that referenced this pull request on Sep 29, 2021
@charris
@howjmay
MAINT: Minor cleanups after merging numpygh-19805 …
ebcd0ee
@inducer inducer mentioned this pull request on Jan 2, 2022
BUG: [Regression 1.21.4 -> 1.22.0] f2py infers integers incorrectly from shape (-(nterms):nterms,nvcount) #20709
Closed
@risicle risicle mentioned this pull request on Mar 6, 2022
python3Packages.numpy: 1.21.5 -> 1.23.1 NixOS/nixpkgs#156578
 Closed
13 tasks
@risicle
risicle commented on Mar 6, 2022 • 
Hmm. Ever since commit 88f988a introduced here, in NixOS, the scikit-learn 1.0.2 kernel PCA unit tests cause crashes for us which appear to be related to a corrupted heap. This is with joblib 1.1.0, scipy 1.8.0, threadpoolctl 3.0.0, gfortran 9.3.0, gcc 10.3. Still investigating.

Edit: also tried with numpy 1.22.2 including fix #20724

@melissawm
Member
melissawm commented on Mar 7, 2022
@pearu thoughts?

@pearu
Contributor
Author
pearu commented on Mar 8, 2022
@risicle Can you provide a minimal reproducer of the reported crashes? The reproducer should include the f2py wrapping step as the messages there may give a hint of what goes wrong.

@risicle
risicle commented on Mar 8, 2022
I'll try - it's all inside scipy's flapack_dsyevr, so I'll have to kick scipy's build process a bit.

Currently trying to convince our lapack to build with debugging symbols..

@risicle
risicle commented on Mar 10, 2022
A lot of fighting with debug symbols and a crash course in fortran later, it looks like what is happening is dsyevr is being called with an M of 10, but a ISUPPZ array allocated only one element long (4 bytes).

I'll try to get scipy's f2py calls to give up their secrets next.

@risicle
risicle commented on Mar 11, 2022
https://gist.github.com/risicle/d7450ec92bd89bff138ead438c28ce1c
https://gist.github.com/risicle/0e201ea432ffda2d0015a51daec88e7f

@@ -49783,33 +49783,33 @@
   capi_iwork_tmp = array_from_pyobj(NPY_INT,iwork_Dims,iwork_Rank,capi_iwork_intent,Py_None);
   if (capi_iwork_tmp == NULL) {
     PyObject *exc, *val, *tb;
     PyErr_Fetch(&exc, &val, &tb);
     PyErr_SetString(exc ? exc : _flapack_error,"failed in converting hidden `iwork' of _flapack.dsyevr to C/Fortran array" );
     npy_PyErr_ChainExceptionsCause(exc, val, tb);
   } else {
     iwork = (int *)(PyArray_DATA(capi_iwork_tmp));

   /* Processing variable z */
-  z_Dims[0]=(compute_v?MAX(0,n):0),z_Dims[1]=(compute_v?(*range=='I'?iu-il+1:MAX(1,n)):0);
+  z_Dims[0]=(compute_v ? MAX(0, n) : 0),z_Dims[1]=(compute_v ? (*range == 'I' ? 1 - il + iu : MAX(1, n)) : 0);
   capi_z_intent |= F2PY_INTENT_OUT|F2PY_INTENT_HIDE;
   capi_z_tmp = array_from_pyobj(NPY_DOUBLE,z_Dims,z_Rank,capi_z_intent,Py_None);
   if (capi_z_tmp == NULL) {
     PyObject *exc, *val, *tb;
     PyErr_Fetch(&exc, &val, &tb);
     PyErr_SetString(exc ? exc : _flapack_error,"failed in converting hidden `z' of _flapack.dsyevr to C/Fortran array" );
     npy_PyErr_ChainExceptionsCause(exc, val, tb);
   } else {
     z = (double *)(PyArray_DATA(capi_z_tmp));

   /* Processing variable isuppz */
-  isuppz_Dims[0]=(compute_v?(2*(*range=='A'||(*range=='I' && iu-il+1==n)?n:0)):0);
+  isuppz_Dims[0]=(compute_v ? 2 * (*range == 'A'||(*range == 1 + 'I' && iu - il == n) ? n : 0) : 0);
   capi_isuppz_intent |= F2PY_INTENT_OUT|F2PY_INTENT_HIDE;
   capi_isuppz_tmp = array_from_pyobj(NPY_INT,isuppz_Dims,isuppz_Rank,capi_isuppz_intent,Py_None);
   if (capi_isuppz_tmp == NULL) {
     PyObject *exc, *val, *tb;
     PyErr_Fetch(&exc, &val, &tb);
     PyErr_SetString(exc ? exc : _flapack_error,"failed in converting hidden `isuppz' of _flapack.dsyevr to C/Fortran array" );
     npy_PyErr_ChainExceptionsCause(exc, val, tb);
   } else {
     isuppz = (int *)(PyArray_DATA(capi_isuppz_tmp));
@HaoZeke HaoZeke mentioned this pull request on Apr 19, 2022
BUG: numpy 1.22 incorrectly infers dimensions #21362
Closed
@bensivo


Add a comment
Comment
 
Add your comment here...
 
Remember, contributions to this repository should follow its contributing guidelines, security policy, and code of conduct.
 ProTip! Add .patch or .diff to the end of URLs for Git’s plaintext views.
Reviewers
@melissawm
melissawm
@HaoZeke
HaoZeke
Assignees
@pearu
pearu
Labels
01 - Enhancement
component: numpy.f2py
Projects
f2py core
Done
Milestone
No milestone
Development
Successfully merging this pull request may close these issues.

 f2py incorrectly translate dimension declaration
Notifications
Customize
You’re not receiving notifications from this thread.
6 participants
@pearu
@mattip
@charris
@risicle
@melissawm
@HaoZeke
Footer
© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
