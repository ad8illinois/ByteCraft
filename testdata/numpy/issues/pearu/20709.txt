Skip to content
numpy
/
numpy

Type / to search

Code
Issues
2k
Pull requests
230
Actions
Projects
9
Wiki
Security
Insights
BUG: [Regression 1.21.4 -> 1.22.0] f2py infers integers incorrectly from shape (-(nterms):nterms,nvcount) #20709
Closed
inducer opened this issue on Jan 2, 2022 · 2 comments · Fixed by #20721
Comments
@inducer
Contributor
inducer commented on Jan 2, 2022 • 
Describe the issue:
Consider the following F90 snippet, let's call that myext.f90.

subroutine h2dmpmp_vec(expn1, nterms, expn2, nvcount)
  implicit none
  integer, intent(in) :: nvcount
  complex*16, intent(in) :: expn1(-(nterms):nterms,nvcount)
  integer, intent(in) :: nterms
  complex*16, intent(out) :: expn2(-(nterms):nterms,nvcount)

  expn2 = expn1
end
(Excerpted and simplified from code generated by https://github.com/inducer/pyfmmlib/.)

Then run this line and get the following output:

$ f2py -c myext.f90; python -c "import untitled; print(untitled.h2dmpmp_vec.__doc__)"
# (SNIP gobs of compiler warnings)
expn2 = h2dmpmp_vec(expn1,[nterms,nvcount])

Wrapper for ``h2dmpmp_vec``.

Parameters
----------
expn1 : input rank-2 array('D') with bounds (1 + 2 * nterms,nvcount)

Other Parameters
----------------
nterms : input int, optional
    Default: shape(expn1, 0)
nvcount : input int, optional
    Default: shape(expn1, 1)

Returns
-------
expn2 : rank-2 array('D') with bounds (1 + 2 * nterms,nvcount)
Observe the default for nterms is given as shape(expn1, 0) when it should be (-1 + shape(expn1, 0)) / 2. If you remove nvcount from the shapes of expn1 and expn2, f2py will produce that.

Maybe this issue is related to #19805?

cc @pearu

NumPy/Python version information:
>>> import sys, numpy; print(numpy.__version__, sys.version)
1.22.0 3.10.1 (main, Dec 16 2021, 23:04:04) [GCC 11.2.0]
Related CI failures;

https://github.com/inducer/pyfmmlib/runs/4682502555?check_suite_focus=true
@inducer inducer added the 00 - Bug label on Jan 2, 2022
@inducer inducer mentioned this issue on Jan 2, 2022
Add numpy version constraint to avoid numpy#20709 inducer/pyfmmlib#11
 Merged
@inducer inducer changed the title BUG: [Regression 1.21.4 -> 1.22] f2py infers integers incorrectly from shape (-(nterms):nterms,nvcount) BUG: [Regression 1.21.4 -> 1.22.0] f2py infers integers incorrectly from shape (-(nterms):nterms,nvcount) on Jan 2, 2022
@dionhaefner dionhaefner mentioned this issue on Jan 3, 2022
Bump numpy from 1.21.5 to 1.22.0 team-ocean/veros#278
 Closed
@pearu
Contributor
pearu commented on Jan 3, 2022
For the record, here is another way to reproduce the issue. First, the expected result is

$ f2py ~/test/numpy/gh20709.f90 -h stdout
subroutine h2dmpmp_vec(expn1,nterms,expn2,nvcount) ! in /home/pearu/test/numpy/gh20709.f90
    complex*16 dimension(2 * nterms + 1,nvcount),intent(in) :: expn1
    integer, optional,intent(in),check((shape(expn1,0)-1)/(2)==nterms),depend(expn1) :: nterms=(shape(expn1,0)-1)/(2)
    complex*16 dimension(2 * nterms + 1,nvcount),intent(out),depend(nterms,nvcount) :: expn2
    integer, optional,intent(in),check(shape(expn1,1)==nvcount),depend(expn1) :: nvcount=shape(expn1,1)
end subroutine h2dmpmp_vec
but the current numpy main branch gives:

subroutine h2dmpmp_vec(expn1,nterms,expn2,nvcount) ! in /home/pearu/test/numpy/gh20709.f90
    complex*16 dimension(1 + 2 * nterms,nvcount),intent(in) :: expn1
    integer, optional,intent(in),check(shape(expn1, 0) == 1 + 2 * nterms),depend(expn1) :: nterms=shape(expn1, 0)
    complex*16 dimension(1 + 2 * nterms,nvcount),intent(out),depend(nvcount,nterms) :: expn2
    integer, optional,intent(in),check(shape(expn1, 1) == nvcount),depend(expn1) :: nvcount=shape(expn1, 1)
end subroutine h2dmpmp_vec
I'll look into it..

pearu added a commit to pearu/numpy that referenced this issue on Jan 3, 2022
@pearu
BUG: Fix array dimensions solver for multidimensional arguments in f2… …
1fbdba3
@pearu pearu mentioned this issue on Jan 3, 2022
BUG: Fix array dimensions solver for multidimensional arguments in f2py #20721
 Merged
@pearu pearu self-assigned this on Jan 3, 2022
@pearu pearu added this to To do in f2py core via automation on Jan 3, 2022
@pearu pearu added 06 - Regression component: numpy.f2py labels on Jan 3, 2022
@charris charris added this to the 1.22.1 release milestone on Jan 3, 2022
@pearu pearu closed this as completed in #20721 on Jan 4, 2022
f2py core automation moved this from To do to Done on Jan 4, 2022
pearu added a commit that referenced this issue on Jan 4, 2022
@pearu
BUG: Fix array dimensions solver for multidimensional arguments in f2… …
20f972c
charris pushed a commit to charris/numpy that referenced this issue on Jan 4, 2022
@pearu
@charris
BUG: Fix array dimensions solver for multidimensional arguments in f2py …
258c3ab
@charris charris mentioned this issue on Jan 4, 2022
BUG: Fix array dimensions solver for multidimensional arguments in f2py #20724
 Merged
@inducer
Contributor
Author
inducer commented on Jan 7, 2022
Thanks for fixing this so quickly!

@dionhaefner dionhaefner mentioned this issue on Jan 19, 2022
BUG: [Regression 1.21.4 -> 1.22.0] f2py cannot handle negative bounds as arguments anymore #20853
Closed
@HaoZeke HaoZeke mentioned this issue on Apr 19, 2022
BUG: numpy 1.22 incorrectly infers dimensions #21362
Closed
@bensivo


Add a comment
Comment
 
Add your comment here...
 
Remember, contributions to this repository should follow its contributing guidelines, security policy, and code of conduct.
Assignees
@pearu
pearu
Labels
00 - Bug
06 - Regression
component: numpy.f2py
Projects
f2py core
Done
Milestone
1.22.1 release
Development
Successfully merging a pull request may close this issue.

 BUG: Fix array dimensions solver for multidimensional arguments in f2py
pearu/numpy
Notifications
Customize
You’re not receiving notifications from this thread.
3 participants
@charris
@inducer
@pearu
Footer
© 2023 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
